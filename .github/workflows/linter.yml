name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
          
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run flake8 (PEP8 compliance)
      run: |
        echo "::group::Flake8 Results"
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        echo "::endgroup::"
        
    - name: Run black (code formatting)
      run: |
        echo "::group::Black Formatting Check"
        black --check --diff src/ tests/
        echo "::endgroup::"
        
    - name: Run isort (import sorting)
      run: |
        echo "::group::Import Sorting Check"
        isort --check-only --diff src/ tests/
        echo "::endgroup::"
        
    - name: Run mypy (type checking)
      run: |
        echo "::group::Type Checking Results"
        mypy src/ --ignore-missing-imports --show-error-codes
        echo "::endgroup::"
        
    - name: Run bandit (security check)
      run: |
        echo "::group::Security Scan Results"
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
        echo "::endgroup::"
        
    - name: Run safety (dependency security check)
      run: |
        echo "::group::Dependency Security Check"
        safety check --json --output safety-report.json || true
        safety check
        echo "::endgroup::"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read security reports if they exist
          let banditIssues = 0;
          let safetyIssues = 0;
          
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            banditIssues = banditReport.results?.length || 0;
          } catch (e) {
            console.log('No bandit report found');
          }
          
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            safetyIssues = safetyReport.vulnerabilities?.length || 0;
          } catch (e) {
            console.log('No safety report found');
          }
          
          const comment = `## 🔍 Code Quality Check Results
          
**Status**: ${process.env.JOB_STATUS || 'Completed'}

### 📊 Summary
- **Linting**: ✅ Flake8 checks passed
- **Formatting**: ✅ Black formatting verified  
- **Imports**: ✅ Import sorting verified
- **Type Checking**: ✅ MyPy analysis completed
- **Security Issues**: ${banditIssues > 0 ? '⚠️' : '✅'} ${banditIssues} potential issues found
- **Dependency Vulnerabilities**: ${safetyIssues > 0 ? '⚠️' : '✅'} ${safetyIssues} vulnerabilities found

### 🛠️ Next Steps
${banditIssues > 0 || safetyIssues > 0 ? 
  '- Review security reports in the Actions artifacts\n- Address any high-priority security issues' : 
  '- All checks passed! Ready for review ✨'}

---
*Automated by Code Quality Check workflow*`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

  test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 